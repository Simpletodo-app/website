---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <!-- Google tag (gtag.js) -->
    <script
      type="text/partytown"
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-0Z20BEMS3T"></script>
    <script type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-0Z20BEMS3T");
    </script>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Simpletodo.app isn’t just another todo list. It’s a tool designed to help you stay organized, focused, and productive. Whether you’re managing work progress or personal projects, Simpletodo helps you streamline your tasks with ease."
    />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <slot />
  </body>
</html>
<style is:global>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
  }
  html {
    font-family: system-ui, sans-serif;
    scroll-behavior: smooth;
  }
  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }

  html.dark {
    background-color: theme(colors.slate.900);
    color: #fff;
  }
</style>

<!-- Theme configuration - see components/ThemeIcon -->
<script>
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme") ?? "light";
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })() as "light" | "dark";

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }

  window.localStorage.setItem("theme", theme);
  updateSourceMedia(theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    const mode = isDark ? "dark" : "light";
    localStorage.setItem("theme", mode);
    updateSourceMedia(mode);
  };

  document
    .getElementById("themeToggle")
    ?.addEventListener("click", handleToggleClick);

  /**
   * Make <picture> <source> elements with media="(prefers-color-scheme:)"
   * respect custom theme preference overrides.
   * Otherwise the `media` preference will only respond to the OS-level setting
   * source: https://larsmagnus.co/blog/how-to-make-images-react-to-light-and-dark-mode
   */
  function updateSourceMedia(colorPreference: "light" | "dark") {
    const pictures = document.querySelectorAll("picture");

    pictures.forEach((picture) => {
      const sources: NodeListOf<HTMLSourceElement> = picture.querySelectorAll(`
          source[media*="prefers-color-scheme"], 
          source[data-media*="prefers-color-scheme"]
        `);

      sources.forEach((source) => {
        // Preserve the source `media` as a data-attribute
        // to be able to switch between preferences
        if (source?.media?.includes("prefers-color-scheme")) {
          source.dataset.media = source.media;
        }

        // If the source element `media` target is the `preference`,
        // override it to 'all' to show
        // or set it to 'none' to hide
        if (source?.dataset?.media?.includes(colorPreference)) {
          source.media = "all";
        } else if (source) {
          source.media = "none";
        }
      });
    });
  }
</script>
