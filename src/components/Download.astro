---
import { downloadOptions } from "../common/utils";
import LinkButton from "./LinkButton.astro";
---

<section id="download" class="py-16">
  <div class="container mx-auto px-4">
    <!-- Title -->
    <h2 class="text-3xl font-normal text-center mb-8">Download App</h2>

    <div class="flex flex-col items-center gap-4">
      <div
        class="relative border border-gray-300 text-gray-800 bg-white shadow-lg max-w-64 w-full"
      >
        <label for="frm-whatever" class="sr-only"
          >Select platform to download app for</label
        >
        <select
          id="downloadSelection"
          class="appearance-none w-full py-2 px-2 bg-white"
          name="whatever"
          id="frm-whatever"
        >
          <option value="">Please choose&hellip;</option>
          {
            downloadOptions.map((item) => (
              <option value={item.title}>{item.title}</option>
            ))
          }
        </select>
        <div
          class="pointer-events-none absolute right-0 top-0 bottom-0 flex items-center px-2 text-gray-700 border-l"
        >
          <svg
            class="h-4 w-4"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
          >
            <path
              d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"
            ></path>
          </svg>
        </div>
      </div>

      <div class="flex flex-col gap-2 items-center w-full">
        <LinkButton id="downloadAppButton" href="" class="max-w-64 w-full">
          DOWNLOAD
        </LinkButton>
        <!-- Store Link -->
        <a
          id="downloadFromStore"
          href=""
          target="_blank"
          class="text-blue-600 underline hover:text-blue-700 transition duration-300 inline-block"
        >
          Download from Mac Store
        </a>
      </div>
    </div>
  </div>
</section>

<script>
  import { downloadOptions, type OSTitle } from "../common/utils";

  const downloadButton = document.getElementById("downloadAppButton")!;
  const downloadSelection = document.getElementById(
    "downloadSelection"
  )! as HTMLSelectElement;

  downloadButton.addEventListener("click", (e) => {
    if (downloadButton.classList.contains("cursor-not-allowed")) {
      e.preventDefault();
    }
  });

  function getDefaultUserOS(): OSTitle | undefined {
    if (navigator.userAgent.indexOf("Win") != -1) return "Windows";
    if (navigator.userAgent.indexOf("Mac") != -1) return "Mac";
    if (navigator.userAgent.indexOf("Linux") != -1) return "Linux (.DEB)";
  }

  const onLoad = () => {
    // Initialize the download button
    updateDownloadAppLinkButton(getDefaultUserOS() || "");
    downloadSelection.value = getDefaultUserOS() || "";
  };

  function updateDownloadAppLinkButton(selectedOption?: string) {
    const option = downloadOptions.find(
      (option) => option.title === selectedOption
    );
    const downloadFromStore = document.getElementById("downloadFromStore")!;

    if (!option) {
      downloadFromStore.style.display = "none";
      downloadButton.classList.add("cursor-not-allowed", "opacity-50");
      return;
    }

    downloadButton.classList.remove("cursor-not-allowed", "opacity-50");
    downloadButton.setAttribute("href", option?.directDownloadLink as string);

    if (option?.storeInfo) {
      downloadFromStore.style.display = "inline-block";
      downloadFromStore.innerText = `Download from ${option.storeInfo.title}`;
      downloadFromStore.setAttribute("href", option.storeInfo.link);
    } else {
      downloadFromStore.style.display = "none";
    }
  }

  downloadSelection?.addEventListener("change", (e) => {
    const selectedOption = (e.target as HTMLSelectElement)?.value;
    updateDownloadAppLinkButton(selectedOption);
  });

  /**
   * Initialize the download button
   */
  onLoad();
</script>
